// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Persistence.Data;

#nullable disable

namespace api.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250420163959_DatabaseInit")]
    partial class DatabaseInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Entities.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackMode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("attack_mode");

                    b.Property<string>("AttackType1")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("attack_type1");

                    b.Property<string>("AttackType2")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("attack_type2");

                    b.Property<decimal>("Damage")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("damage");

                    b.Property<decimal>("ExtraDamage")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("extra_damage");

                    b.Property<int>("ExtraDamageCount")
                        .HasColumnType("integer")
                        .HasColumnName("extra_damage_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("TricksterWeaponId")
                        .HasColumnType("integer")
                        .HasColumnName("trickster_weapon_id");

                    b.HasKey("Id");

                    b.HasIndex("TricksterWeaponId");

                    b.ToTable("attacks");
                });

            modelBuilder.Entity("api.Models.Entities.Boss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArcaneDefense")
                        .HasColumnType("integer")
                        .HasColumnName("arcane_defense");

                    b.Property<int>("BloodEchoes")
                        .HasColumnType("integer")
                        .HasColumnName("blood_echoes");

                    b.Property<int>("BloodtingeDefense")
                        .HasColumnType("integer")
                        .HasColumnName("bloodtinge_defense");

                    b.Property<int>("BluntDefense")
                        .HasColumnType("integer")
                        .HasColumnName("blunt_defense");

                    b.Property<int>("BoltDefense")
                        .HasColumnType("integer")
                        .HasColumnName("bolt_defense");

                    b.Property<int>("FireDefense")
                        .HasColumnType("integer")
                        .HasColumnName("fire_defense");

                    b.Property<int>("Health")
                        .HasColumnType("integer")
                        .HasColumnName("health");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsBeast")
                        .HasColumnType("boolean")
                        .HasColumnName("is_beast");

                    b.Property<bool>("IsInterruptible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_interruptible");

                    b.Property<bool>("IsKin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_kin");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<bool>("IsWeakToRighteous")
                        .HasColumnType("boolean")
                        .HasColumnName("is_weak_to_righteous");

                    b.Property<bool>("IsWeakToSerrated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_weak_to_serrated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("PhysicalDefense")
                        .HasColumnType("integer")
                        .HasColumnName("physical_defense");

                    b.Property<int>("RapidPoisonResistance")
                        .HasColumnType("integer")
                        .HasColumnName("rapid_poison_resistance");

                    b.Property<int>("SlowPoisonResistance")
                        .HasColumnType("integer")
                        .HasColumnName("slow_poison_resistance");

                    b.Property<int>("ThrustDefense")
                        .HasColumnType("integer")
                        .HasColumnName("thrust_defense");

                    b.HasKey("Id");

                    b.ToTable("bosses");
                });

            modelBuilder.Entity("api.Models.Entities.Firearm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArcaneAttack")
                        .HasColumnType("integer")
                        .HasColumnName("arcane_attack");

                    b.Property<int>("ArcaneRequirement")
                        .HasColumnType("integer")
                        .HasColumnName("arcane_requirement");

                    b.Property<int>("BloodAttack")
                        .HasColumnType("integer")
                        .HasColumnName("blood_attack");

                    b.Property<int>("BloodtingeRequirement")
                        .HasColumnType("integer")
                        .HasColumnName("bloodtinge_requirement");

                    b.Property<int>("BoltAttack")
                        .HasColumnType("integer")
                        .HasColumnName("bolt_attack");

                    b.Property<int>("BulletUse")
                        .HasColumnType("integer")
                        .HasColumnName("bullet_use");

                    b.Property<int>("FireAttack")
                        .HasColumnType("integer")
                        .HasColumnName("fire_attack");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Imprints")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("imprints");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("PhysicalAttack")
                        .HasColumnType("integer")
                        .HasColumnName("physical_attack");

                    b.Property<int>("ScalingId")
                        .HasColumnType("integer")
                        .HasColumnName("scaling_id");

                    b.Property<int>("SkillRequirement")
                        .HasColumnType("integer")
                        .HasColumnName("skill_requirement");

                    b.Property<int>("StrengthRequirement")
                        .HasColumnType("integer")
                        .HasColumnName("strength_requirement");

                    b.HasKey("Id");

                    b.HasIndex("ScalingId")
                        .IsUnique();

                    b.ToTable("firearms");
                });

            modelBuilder.Entity("api.Models.Entities.Scaling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ArcaneScaling")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("arcane_scaling");

                    b.Property<decimal>("ArcaneStep")
                        .HasPrecision(4, 3)
                        .HasColumnType("numeric(4,3)")
                        .HasColumnName("arcane_step");

                    b.Property<decimal>("BloodtingeScaling")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("bloodtinge_scaling");

                    b.Property<decimal>("BloodtingeStep")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("bloodtinge_step");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("SkillScaling")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("skill_scaling");

                    b.Property<decimal>("SkillStep")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("skill_step");

                    b.Property<decimal>("StrengthScaling")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("strength_scaling");

                    b.Property<decimal>("StrengthStep")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("strength_step");

                    b.HasKey("Id");

                    b.ToTable("scalings");
                });

            modelBuilder.Entity("api.Models.Entities.TricksterWeapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArcaneAttack")
                        .HasColumnType("integer")
                        .HasColumnName("arcane_attack");

                    b.Property<int>("ArcaneRequirement")
                        .HasColumnType("integer")
                        .HasColumnName("arcane_requirement");

                    b.Property<int>("BloodAttack")
                        .HasColumnType("integer")
                        .HasColumnName("blood_attack");

                    b.Property<int>("BloodtingeRequirement")
                        .HasColumnType("integer")
                        .HasColumnName("bloodtinge_requirement");

                    b.Property<int>("BoltAttack")
                        .HasColumnType("integer")
                        .HasColumnName("bolt_attack");

                    b.Property<int>("BulletUse")
                        .HasColumnType("integer")
                        .HasColumnName("bullet_use");

                    b.Property<int>("FireAttack")
                        .HasColumnType("integer")
                        .HasColumnName("fire_attack");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("ImprintsLost")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("imprints_lost");

                    b.Property<string>("ImprintsNormal")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("imprints_normal");

                    b.Property<string>("ImprintsUncanny")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("imprints_uncanny");

                    b.Property<int>("MaxUpgradeAttack")
                        .HasColumnType("integer")
                        .HasColumnName("max_upgrade_attack");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("PhysicalAttack")
                        .HasColumnType("integer")
                        .HasColumnName("physical_attack");

                    b.Property<int>("Rally")
                        .HasColumnType("integer")
                        .HasColumnName("rally");

                    b.Property<int>("RapidPoison")
                        .HasColumnType("integer")
                        .HasColumnName("rapid_poison");

                    b.Property<int>("ScalingId")
                        .HasColumnType("integer")
                        .HasColumnName("scaling_id");

                    b.Property<int>("SkillRequirement")
                        .HasColumnType("integer")
                        .HasColumnName("skill_requirement");

                    b.Property<int>("StrengthRequirement")
                        .HasColumnType("integer")
                        .HasColumnName("strength_requirement");

                    b.HasKey("Id");

                    b.HasIndex("ScalingId")
                        .IsUnique();

                    b.ToTable("trickster_weapons");
                });

            modelBuilder.Entity("api.Models.Entities.Attack", b =>
                {
                    b.HasOne("api.Models.Entities.TricksterWeapon", "TricksterWeapons")
                        .WithMany("Attacks")
                        .HasForeignKey("TricksterWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TricksterWeapons");
                });

            modelBuilder.Entity("api.Models.Entities.Firearm", b =>
                {
                    b.HasOne("api.Models.Entities.Scaling", "Scalings")
                        .WithOne("Firearms")
                        .HasForeignKey("api.Models.Entities.Firearm", "ScalingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scalings");
                });

            modelBuilder.Entity("api.Models.Entities.TricksterWeapon", b =>
                {
                    b.HasOne("api.Models.Entities.Scaling", "Scalings")
                        .WithOne("TricksterWeapons")
                        .HasForeignKey("api.Models.Entities.TricksterWeapon", "ScalingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scalings");
                });

            modelBuilder.Entity("api.Models.Entities.Scaling", b =>
                {
                    b.Navigation("Firearms")
                        .IsRequired();

                    b.Navigation("TricksterWeapons")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Entities.TricksterWeapon", b =>
                {
                    b.Navigation("Attacks");
                });
#pragma warning restore 612, 618
        }
    }
}
